# ----------------------------------------------------------------------------
# CI pipeline for main branch.
# - Builds Java app with Maven
# - Runs tests (fail-fast if broken)
# - Bumps the minor version after successful test
# - Builds and pushes a Docker image tagged with the new version
# ----------------------------------------------------------------------------

name: CI

# Trigger this workflow on any push to the 'main' branch
on:
  push:
    branches:
      - main

jobs:
  build-and-publish:
    # Use GitHub's hosted Ubuntu environment
    runs-on: ubuntu-latest

    steps:
      # Step: Checkout this repositoryâ€™s code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step: Set up Java 17 (required by Maven and your project)
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      # Step: Run Maven build & test
      # This runs unit tests and fails if they fail
      - name: Build and test with Maven
        run: mvn clean verify

      # Step: Install xmllint dependency
      - name: Install xmllint
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils

      # Step: Bump version after successful test
      - name: Bump minor version
        run: |
          # Extract current version string from pom.xml using xmllint
          current=$(xmllint --xpath "//*[local-name()='project']/*[local-name()='version']/text()" pom.xml)

          # Remove '-SNAPSHOT' if it's present (safe even if it's not)
          base=${current%-SNAPSHOT}

          # Split major and minor parts based on dot delimiter
          major=$(echo $base | cut -d. -f1)
          minor=$(echo $base | cut -d. -f2)

          # Increment the minor version
          next_minor=$((minor + 1))

          # Construct new version string (resets patch to 0)
          new_version="$major.$next_minor.0"

          # Print new version (for debug/logging)
          echo "New version: $new_version"

          # Replace version in pom.xml using sed
          sed -i "s|<version>.*</version>|<version>$new_version</version>|" pom.xml

          # Export new version as environment variable for later steps
          echo "VERSION=$new_version" >> $GITHUB_ENV

      # Step: Authenticate to Docker Hub using GitHub Secrets
      - name: Docker login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Step: Build Docker image with the updated version tag
      - name: Build Docker image
        run: docker build -t erezrimer/simple-maven:${{ env.VERSION }} .

      # Step: Push the Docker image to Docker Hub
      - name: Push Docker image
        run: docker push erezrimer/simple-maven:${{ env.VERSION }}
